name: Staging CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  # ===== CI/CD Checks =====
  lint-and-format:
    name: 🔍 Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint -- --max-warnings=0

      - name: Check code formatting
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}"
        continue-on-error: true

  type-check:
    name: 📝 TypeScript Type Checking
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript compiler
        run: npx tsc --noEmit --pretty

  build-test:
    name: 🏗️ Build Verification
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Check build output
        run: |
          if [ ! -d ".next" ]; then
            echo "❌ Build failed - .next directory not found"
            exit 1
          fi
          echo "✅ Build successful"

  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm

      - name: Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Check for known vulnerabilities
        run: |
          AUDIT_RESULT=$(npm audit --json)
          HIGH_VULNS=$(echo $AUDIT_RESULT | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(echo $AUDIT_RESULT | jq '.metadata.vulnerabilities.critical // 0')

          echo "High vulnerabilities: $HIGH_VULNS"
          echo "Critical vulnerabilities: $CRITICAL_VULNS"

          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "⚠️ Critical vulnerabilities found!"
            exit 1
          fi

  # ===== Staging Deployment =====
  deploy-staging:
    name: 🚀 Deploy to Staging
    needs: [lint-and-format, type-check, build-test, security-audit]
    runs-on: ubuntu-latest
    if: success()
    outputs:
      staging-url: ${{ steps.deploy-staging.outputs.url }}
      deployment-id: ${{ steps.deploy-staging.outputs.deployment-id }}
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: |
          export VERCEL_TOKEN='${{ secrets.VERCEL_TOKEN }}'
          vercel pull --yes --environment=preview --token="$VERCEL_TOKEN"

      - name: Build Project Artifacts
        run: |
          export VERCEL_TOKEN='${{ secrets.VERCEL_TOKEN }}'
          vercel build --token="$VERCEL_TOKEN"

      - name: Deploy to Vercel Staging
        id: deploy-staging
        run: |
          export VERCEL_TOKEN='${{ secrets.VERCEL_TOKEN }}'
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token="$VERCEL_TOKEN")

          # Extract deployment ID from URL
          DEPLOYMENT_ID=$(echo $DEPLOYMENT_URL | sed 's|https://||' | cut -d'.' -f1)

          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "deployment-id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT

          echo "### 🚀 Staging Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "**URL**: $DEPLOYMENT_URL" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment ID**: $DEPLOYMENT_ID" >> $GITHUB_STEP_SUMMARY

      - name: Add deployment comment to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ steps.deploy-staging.outputs.url }}';
            const deploymentId = '${{ steps.deploy-staging.outputs.deployment-id }}';

            const comment = `## 🎉 Staging Deployment Successful!

            ### 📊 Deployment Details
            - **Environment**: Staging
            - **URL**: ${deploymentUrl}
            - **Deployment ID**: \`${deploymentId}\`
            - **Commit**: \`${{ github.sha }}\`

            ### ✅ All CI Checks Passed
            - ✅ Code quality (ESLint)
            - ✅ Type checking (TypeScript)
            - ✅ Build verification
            - ✅ Security audit

            ### 🧪 Testing Instructions
            1. Visit the staging URL above
            2. Test all major functionality
            3. Verify responsive design
            4. Check for console errors
            5. Test performance metrics

            ### 📝 Next Steps
            Once testing is complete and approved:
            - Merge this PR to deploy to production
            - Production deployment will be automatic on merge

            ---
            *Deployed by GitHub Actions • [View Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # ===== Post-Deployment Checks =====
  smoke-test:
    name: 🧪 Smoke Tests
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Wait for deployment to be ready
        run: sleep 30

      - name: Check deployment health
        run: |
          STAGING_URL="${{ needs.deploy-staging.outputs.staging-url }}"

          echo "Testing staging deployment at: $STAGING_URL"

          # Check if site is accessible
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" $STAGING_URL)

          if [ "$HTTP_CODE" -eq 200 ]; then
            echo "✅ Deployment is accessible (HTTP $HTTP_CODE)"
          else
            echo "❌ Deployment returned HTTP $HTTP_CODE"
            exit 1
          fi

      - name: Check for critical errors
        run: |
          STAGING_URL="${{ needs.deploy-staging.outputs.staging-url }}"

          # Check if page contains error indicators
          RESPONSE=$(curl -s $STAGING_URL)

          if echo "$RESPONSE" | grep -qi "error\|exception\|500\|404"; then
            echo "⚠️ Possible errors detected in response"
            echo "$RESPONSE" | grep -i "error\|exception\|500\|404"
          else
            echo "✅ No critical errors detected"
          fi

  # ===== Final Summary =====
  deployment-summary:
    name: 📋 Deployment Summary
    needs: [deploy-staging, smoke-test]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "# 🎯 Staging Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Deployment Status" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.deploy-staging.result }}" == "success" ]; then
            echo "✅ **Deployment**: Success" >> $GITHUB_STEP_SUMMARY
            echo "🔗 **URL**: ${{ needs.deploy-staging.outputs.staging-url }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Deployment**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.smoke-test.result }}" == "success" ]; then
            echo "✅ **Smoke Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Smoke Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Pipeline completed at $(date -u)*" >> $GITHUB_STEP_SUMMARY
